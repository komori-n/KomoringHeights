KomoringHeightsのオプション
---

# 基本機能

## USI_Hash

置換表のために使用するメモリ量（MB）。128以上の値を推奨。
置換表以外にもスタック領域などで1GB程度のメモリを消費する可能性があるので、
調子に乗って過度に攻めた値にしないように注意。

## Threads

エンジンが使用する使用するスレッド数。お使いのCPUのコア数以下に設定することを推奨する。

並列化機能はかなりシンプルな実装のため、16より大きな値を設定してもあまり探索効率が向上しない可能性がある。

## MultiPV

MultiPV設定。2以上に設定すると、次善手以降の手も詰みかどうか探索する。

MultiPVを大きく設定しても、最善手の探索性能には影響しない。
最善手の探索が終わり次第、次善手の探索へと移るアルゴリズムになっている。

## WriteDebugLog

デバッグログの書き出し先。通常使用時は空でOK。

## GenerateAllLegalMoves

合法手をすべて生成するかどうか。基本的にはONを推奨。

## NodesLimit

探索局面数制限。訪れた局面数が（だいたい）この値に達したら探索を打ち切る。
NodesLimit=0 の場合、制限なしとなる。

## PvInterval

探索中情報を表示する周期（ミリ秒）。

## RootIsAndNodeIfChecked

双玉で王手されている局面のとき、手番側を玉方として扱う。

KomoringHeightsでは、玉の有無および現局面で王手されているかをもとに玉方を判断する。
玉方の判定方法を下表に示す。

  手番玉|王手されている|非手番玉||         玉方
  ------+--------------+--------++----------------------
   ない |      -       |  ない  ||      (undefined)
   ない |      -       |  ある  ||       非手番側
   ある |      NO      |  ない  ||      (undefined)
   ある |     YES      |  ない  ||        手番側
   ある |      NO      |  ある  ||       非手番側
   ある |     YES      |  ある  ||RootIsAndNodeIfChecked

双玉の状況で現局面が王手されている場合、どちらを玉方にするかは任意性がある。
RootIsAndNodeIfChecked=true なら、玉方は手番側となる。
RootIsAndNodeIfChecked=false なら、玉方は非手番側となる。

## ScoreCalculation

探索中に表示する評価値の計算方法。詰将棋探索では評価値を用いて探索しているわけ
ではないが、評価値欄を空にしておくのももったいないので適当に値を出せるように
している。

- None: 常に0
- Dn: dn値（0に近いほど不詰に近い）
- MinusPn: -pn値（0に近いほど詰みに近い）
- Ponanza: 詰み確率 pn/(pn+dn) を評価値（centi pawn）に変換（通常の将棋エンジンと同様）

## PostSearchLevel

詰みを見つけた後にどの程度探索を延長するか。

df-pnアルゴリズムでは、その性質から「N手以下で詰み」を示すのが得意である。
そのため、最初に見つけた詰み手順が最善であるかどうかは分からない。
この N のしきい値を少しずつ小さくしながら繰り返し探索をすることで、
詰み手順が人間的により良いものになる。

- None: なにもしない。詰みを見つけたら即終了する。
        N 手詰めに対し N 手より短い手順を返すことがある。
- UpperBound: 詰み手数の上限値に一致する手順を見つけたら終了する。
              N 手詰めに対し N 手より短い手順を返すことはないが、最短性は保証されない。
- MinLength: 詰み手数の最短性を保証する。
             この探索で N 手詰みが返ってきたらその局面は厳密に N 手詰めである
